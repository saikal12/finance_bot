import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()
import asyncio
from asgiref.sync import sync_to_async
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from telegram_bot.service.filter import get_chek_summary
from backend.settings import BOT_TOKEN, API_KEY, ORG_ID
from telegram_bot.models import UserAccount, Receipt
from telegram_bot.service.ReceiptAnalyzer import ReceiptAnalyzer, ReceiptSaver
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()


@sync_to_async
def create_user_account(user):
    user_account, created = UserAccount.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            "username": user.username,
        }
    )
    return user_account, created


async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user, created = await create_user_account(user)
    keyboard = [
        [KeyboardButton("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —á–µ–∫–∏")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–æ–≤
        [KeyboardButton("–ü–æ–º–æ—â—å")],  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


    if created:
        await update.message.reply_text("–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω.", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=reply_markup)


async def help_command(update: Update, context: CallbackContext):
    message = (
        "üÜò **–ü–æ–º–æ—â—å**\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —á–µ–∫–∏ –æ—Ç –±–∞–Ω–∫–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –±–¥\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —á–µ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–µ–∫–æ–≤\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π."
    )
    await update.message.reply_text(message)


async def handle_img(update: Update, context: CallbackContext):
    """ take image and"""
    from_user = update.message.from_user
    user_account, created = await create_user_account(from_user)
    img_file = await update.message.photo[-1].get_file()  # Receive the file
    img_bytes = await img_file.download_as_bytearray()  # download it as bytes
    try:
        analyser_object = ReceiptAnalyzer(API_KEY, ORG_ID)
        analyser_result = analyser_object.analyze_image(img_bytes)
        #analyser_result = analyser_object.plug(img_bytes)
        await update.message.reply_text(analyser_result)
        saver_object = ReceiptSaver(user_account)
        await saver_object.save_receipt(analyser_result)
        await update.message.reply_text("–ß–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        raise e
        print(f"Error: {str(e)}")


async def filter_receipt(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday")],
        [InlineKeyboardButton("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é", callback_data="filter_week")],
        [InlineKeyboardButton("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data="filter_month")],
        [InlineKeyboardButton("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", callback_data="filter_3month")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", reply_markup=reply_markup)


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_img))
    application.add_handler(CommandHandler("filter_receipt", filter_receipt))
    application.add_handler(MessageHandler(filters.Regex("–ü–æ–º–æ—â—å"), help_command))
    application.add_handler(MessageHandler(filters.Regex("–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —á–µ–∫–∏"), filter_receipt))
    application.add_handler(CallbackQueryHandler(get_chek_summary))
    application.run_polling()


if __name__ == "__main__":
    asyncio.run(main())